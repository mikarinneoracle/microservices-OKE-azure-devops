trigger:
- main

pool:
  name: default

steps:

- task: PowerShell@2
  displayName: 'Deploy cert manager with kubectl'
  inputs:
    targetType: 'inline'
    script: |
      /usr/local/bin/kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml
      
- task: PowerShell@2
  displayName: 'Setup ADB yaml'
  inputs:
    targetType: 'inline'
    script: |
      ((Get-Content -path deployment-adb.yaml -Raw) -replace '$COMPARTMENT', '$(COMPARTMENT)') | Set-Content -Path deployment-adb.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy ADB operator'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'oracle-database-operator-system'
    manifests: |
      $(System.DefaultWorkingDirectory)/operator-adb.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy ADB'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/secrets-adb.yaml
      $(System.DefaultWorkingDirectory)/deployment-adb.yaml

- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'
- script: |
    cd ui
    npm install
  displayName: 'npm install ui'
- script: |
    cd price
    npm install
  displayName: 'npm install price svc'
- script: |
    cd options
    npm install
  displayName: 'npm install options svc'

- task: Docker@2
  displayName: 'Login to OCIR'
  inputs:
    command: login
    containerRegistry: '$(CONTAINER_REGISTRY)'

- task: Docker@2
  displayName: 'Build & Push DB Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile-db'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_DB)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push UI Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile-ui'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_UI)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push Price Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile-price'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_PRICE)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push Options Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile-options'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_OPTIONS)'
    tags: $(Build.BuildNumber)

- task: KubernetesManifest@0
  displayName: 'Setup secret'
  inputs: 
    action: 'createSecret'
    secretType: 'dockerRegistry'
    secretName: '$(OcirPullSecret)'
    dockerRegistryEndpoint: '$(CONTAINER_REGISTRY)'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'

- task: KubernetesManifest@0
  displayName: 'Deploy To K8s Cluster -Node app and DB containers'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/deployment-ui.yaml
      $(System.DefaultWorkingDirectory)/deployment-price.yaml
      $(System.DefaultWorkingDirectory)/deployment-options.yaml
    imagePullSecrets: |
      $(OcirPullSecret)
    containers: |
      $(containerDBImageFullNameForK8sDeploy):$(Build.BuildNumber)
      $(containerUiImageFullNameForK8sDeploy):$(Build.BuildNumber)
      $(containerPriceImageFullNameForK8sDeploy):$(Build.BuildNumber)
      $(containerOptionsImageFullNameForK8sDeploy):$(Build.BuildNumber)

- task: KubernetesManifest@0
  displayName: 'Deploy Ingress'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'ingress-nginx'
    manifests: |
      $(System.DefaultWorkingDirectory)/nginx-ingress.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy Ingress Routes to Node app'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/ui-clusterip.yaml
      $(System.DefaultWorkingDirectory)/price-clusterip.yaml
      $(System.DefaultWorkingDirectory)/options-clusterip.yaml
      $(System.DefaultWorkingDirectory)/ingress-routes.yaml