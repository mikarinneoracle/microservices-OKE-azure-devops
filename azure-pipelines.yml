trigger:
- main

pool:
  name: default

steps:

- task: KubernetesManifest@0
  displayName: 'Deploy Cert Manager 1/5'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'cert-manager'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/cert-manager/cert-manager-1.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy Cert Manager 2/5'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'kube-system'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/cert-manager/cert-manager-2.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy Cert Manager 3/5'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'cert-manager'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/cert-manager/cert-manager-3.yaml
      
- task: KubernetesManifest@0
  displayName: 'Deploy Cert Manager 4/5'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'kube-system'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/cert-manager/cert-manager-4.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy Cert Manager 5/5'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'cert-manager'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/cert-manager/cert-manager-5.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy ADB cluster role binding'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'oracle-database-operator-system'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/ADB-cluster-role-binding.yaml

- task: PowerShell@2
  displayName: 'Setup ADB yaml'
  inputs:
    targetType: 'inline'
    script: |
      ((Get-Content -path adb-operator/deployment-adb.yaml -Raw) -replace 'ADB_COMPARTMENT_OCID', '$(COMPARTMENT)') | Set-Content -Path adb-operator/deployment-adb.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy ADB operator'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'oracle-database-operator-system'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/ADB-operator.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy ADB'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-operator/secrets-adb.yaml
      $(System.DefaultWorkingDirectory)/adb-operator/deployment-adb.yaml

- task: PowerShell@2
  displayName: 'Download Oracle instaclient'
  inputs:
    targetType: 'inline'
    script: |
      wget https://download.oracle.com/otn_software/linux/instantclient/23c/instantclient-basic-linux.x64-23.3.0.0.0.zip

- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

- script: |
    cd adb-job
    npm install
  displayName: 'npm install adb-job'

- script: |
    cd ui
    npm install
  displayName: 'npm install ui'

- script: |
    cd price
    npm install
  displayName: 'npm install price svc'

- script: |
    cd options
    npm install
  displayName: 'npm install options svc'

- task: Docker@2
  displayName: 'Login to OCIR'
  inputs:
    command: login
    containerRegistry: '$(CONTAINER_REGISTRY)'

- task: Docker@2
  displayName: 'Build & Push 23ai Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/options/Dockerfile-23ai'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_23ai)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push ADB Job Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/adb-job/Dockerfile-adb-job'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_ADB_JOB)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push UI Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/ui/Dockerfile-ui'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_UI)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push Price Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/price/Dockerfile-price'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_PRICE)'
    tags: $(Build.BuildNumber)

- task: Docker@2
  displayName: 'Build & Push Options Image $(Build.BuildNumber)'
  inputs:
    command: buildAndPush
    buildContext: '$(System.DefaultWorkingDirectory)'
    Dockerfile: '$(System.DefaultWorkingDirectory)/options/Dockerfile-options'
    containerRegistry: '$(CONTAINER_REGISTRY)'
    repository: '$(CONTAINER_REPOSITORY_OPTIONS)'
    tags: $(Build.BuildNumber)

- task: PowerShell@2
  displayName: 'Setup ADB job yaml'
  inputs:
    targetType: 'inline'
    script: |
      ((Get-Content -path adb-job/deployment-adb-job.yaml -Raw) -replace 'ADB_JOB_NAME', 'adb-job-$(Build.BuildId)') | Set-Content -Path adb-job/deployment-adb-job.yaml
      
- task: KubernetesManifest@0
  displayName: 'Setup secret'
  inputs: 
    action: 'createSecret'
    secretType: 'dockerRegistry'
    secretName: '$(OcirPullSecret)'
    dockerRegistryEndpoint: '$(CONTAINER_REGISTRY)'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'

- task: KubernetesManifest@0
  displayName: 'Deploy containers to OKE'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/ui/deployment-ui.yaml
      $(System.DefaultWorkingDirectory)/price/deployment-price.yaml
      $(System.DefaultWorkingDirectory)/options/deployment-options.yaml
    imagePullSecrets: |
      $(OcirPullSecret)
    containers: |
      $(OCIR)/$(CONTAINER_REPOSITORY_23ai):$(Build.BuildNumber)
      $(OCIR)/$(CONTAINER_REPOSITORY_UI):$(Build.BuildNumber)
      $(OCIR)/$(CONTAINER_REPOSITORY_PRICE):$(Build.BuildNumber)
      $(OCIR)/$(CONTAINER_REPOSITORY_OPTIONS):$(Build.BuildNumber)
      $(OCIR)/$(CONTAINER_REPOSITORY_ADB_JOB):$(Build.BuildNumber)

- task: KubernetesManifest@0
  displayName: 'Run DB jobs in OKE'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/adb-job/deployment-adb-job.yaml
    imagePullSecrets: |
      $(OcirPullSecret)
    containers: |
      $(OCIR)/$(CONTAINER_REPOSITORY_ADB_JOB):$(Build.BuildNumber)

- task: KubernetesManifest@0
  displayName: 'Deploy Ingress'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    namespace: 'ingress-nginx'
    manifests: |
      $(System.DefaultWorkingDirectory)/ingress-nginx/nginx-ingress.yaml

- task: KubernetesManifest@0
  displayName: 'Deploy Ingress Routes to Node app'
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: '$(K8S_CONNECTION_NAME)'
    manifests: |
      $(System.DefaultWorkingDirectory)/ingress-nginx/ui-clusterip.yaml
      $(System.DefaultWorkingDirectory)/ingress-nginx/price-clusterip.yaml
      $(System.DefaultWorkingDirectory)/ingress-nginx/options-clusterip.yaml
      $(System.DefaultWorkingDirectory)/ingress-nginx/ingress-routes.yaml